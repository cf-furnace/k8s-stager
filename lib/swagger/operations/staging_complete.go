package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StagingCompleteHandlerFunc turns a function with the right signature into a staging complete handler
type StagingCompleteHandlerFunc func(StagingCompleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StagingCompleteHandlerFunc) Handle(params StagingCompleteParams) middleware.Responder {
	return fn(params)
}

// StagingCompleteHandler interface for that can handle valid staging complete params
type StagingCompleteHandler interface {
	Handle(StagingCompleteParams) middleware.Responder
}

// NewStagingComplete creates a new http.Handler for the staging complete operation
func NewStagingComplete(ctx *middleware.Context, handler StagingCompleteHandler) *StagingComplete {
	return &StagingComplete{Context: ctx, Handler: handler}
}

/*StagingComplete swagger:route POST /staging/{staging_guid}/completed stagingComplete

StagingComplete staging complete API

*/
type StagingComplete struct {
	Context *middleware.Context
	Handler StagingCompleteHandler
}

func (o *StagingComplete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStagingCompleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
